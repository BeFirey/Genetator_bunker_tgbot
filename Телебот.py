import telebot
from telebot import types
from random import choice
from random import randint
from copy import copy
import emoji
import settings

bot = telebot.TeleBot(settings.API_KEY)
# region Переменные кол-ва игроков, мужчин и женщин
people_count_in_game = 0  # кол-во людей в игре
count_males = 0  # количество персонажей мужчин
count_females = 0  # количество персонажей женщин
males_and_females = []
# endregion
id_room = ''  # номер комнаты
# region Pers переменные
pers1 = []
pers2 = []
pers3 = []
pers4 = []
pers5 = []
pers6 = []
pers7 = []
pers8 = []
pers9 = []
pers10 = []
pers11 = []
pers12 = []
pers13 = []
pers14 = []
pers15 = []
pers16 = []
# endregion
# region  Все данные про игроков
gender = ['Мужчина', 'Женщина']
age = ['Молодой', 'Взрослый', 'Взрослый', 'Пожилой']
profession = ['Сантехник', 'Учитель', 'Программист', 'Уборщик', 'Кассир', 'Аниматор', 'Акушер-гинеколог', 'Диетолог',
              'Биохимик', 'Рыбак', 'Священнослужитель', 'Радиомеханик', 'Терапевт', 'Банкир', 'Нанотехнолог',
              'Библиотекарь', 'Хирург', 'Астроном', 'Сексолог', 'Проститутка', 'Флорист', 'Слесарь', 'Порноактер',
              'Мясник', 'Швея', 'Военный лётчик', 'Гид-переводчик', 'Кладовщик', 'Адвокат', 'Уролог', 'Дегустатор',
              'Борт-проводник', 'Налоговый инспектор', 'Почтальон', 'Автомеханик', 'Гонщик', 'Электрик', 'Фотограф',
              'Статистик', 'Социолог', 'Блогер', 'Курьер', 'Грузчик', 'Медсестра/медбрат', 'Зоолог', 'Ветеринар',
              'Пожарный', 'Дипломат', 'Риелтор', 'Психиатр', 'Диджей', 'Прокурор', 'Фармацевт', 'Химик', 'Продавец',
              'Капитан судна', 'Невропатолог', 'Спасатель', 'Детектив', 'Философ', 'Хореограф', 'Иммунолог', 'Окулист',
              'Строитель', 'Кардиолог', 'Климатолог', 'Полицейский', 'Стоматолог', 'Почвовед', 'Вирусолог', 'Бурильщик',
              'Разнорабочий', 'Архитектор', 'Инкассатор', 'Животновод', 'Безработный', 'Фермер', 'Официант', 'Повар',
              'Няня', 'Менеджер', 'Религиовед', 'Телеведущий', 'Корреспондент', 'Геймер', 'Бухгалтер', 'Чиновник',
              'Таксист', 'Дерматолог', 'Садовник', 'Физик-ядерщик', 'Нейрохирург', 'Генетик', 'Журналист', 'Гинеколог',
              'Тату-мастер', 'Президент', 'Шахматист', 'Ювелир', 'Охотник', 'Пастух', 'Дрессировщик', 'Продавец мороженного',
              'Эндокринолог', 'Лор', 'Тракторист', 'Сварщик', 'Маркетолог', 'Воспитатель', 'Юрист', 'Кондитер', 'Тестировщик',
              'Нанотехнолог', 'Художник', 'Оперный певец', 'Актер', 'Бизнесмен', 'Космонавт', 'Водитель автобуса',
              'Железнодорожник', 'Инженер', 'Кинолог', 'Тренер', 'Пианист', 'Гитарист', 'Учитель иностранного языка',
              'Дирижёр', 'Кинокритик', 'Продюссер', 'Танцор', 'Кинооператор', 'Поэт', 'Следователь', 'Участковый',
              'ФСБшник', 'МЧСник', 'Инструктор НАТО', 'Наводчик дронов', 'Военный', 'Танкист', 'Полевой медик', 'Кладмен',
              'Шаман', 'Кукловод', 'Конвоир', 'Сыщик', 'Нотариус', 'Водолаз', 'Моряк', 'Полковник', 'Майор', 'Маляр', 'Эскорт']
profession_time = ['меньше месяца', '3-6 месяцев', '6 месяцев - 1 год', 'больше года', '1-2 года', 'более 2 лет',
                   'более 5 лет', '10 лет', '12 лет', '15 лет', '20 лет', 'более 20 лет',
                   'всю жизнь']  # Впринципе переменная не используется, но нужны данные из неё.
# То есть она просто как шпаргалка для данных
health = ['Нет ноги', 'Нет двух ног', 'Нет руки', 'Нет двух рук', 'Нет конечностей', 'Нет уха',
          'Нет ушей', 'Глухой', 'Проблемы со слухом', 'Нет глаза', 'Нет глаз', 'Слепой', 'Проблемы со зрением',
          'Проблема с обонянием', 'Деменция', 'Аутизм', 'Синдром дауна', 'Альцгеймер', 'Ухудшение памяти',
          'Ухудшение интеллекта', 'Косоглазие', 'Склероз', 'Рак легких', 'Рак сердца', 'Рак печени', 'Рак мозга',
          'Рак крови', 'Рак костей', 'Рак почек', 'Рак кожи', 'Рак желудка', 'Нет одной почки', 'Пневмония',
          'Астма', 'Авитоминоз', 'Парализован', 'Сифилис', 'СПИД', 'Немой', 'ВИЧ', 'СДВГ', 'Шизофрения', 'Плоскостопие',
          'Раздвоение личности', 'Глухонемой', 'Туберкулёз', 'Дальтонизм', 'Скалиоз'] #Нету "Идеально здоров" так как этот параметр генерируется в фукции generator_persa
body_type = ['Атлетическое', 'Полный/ая', 'Жирный/ая', 'Худощавое', 'Худой/ая', 'Спортивное', 'Упитанный/ая',
             'Обычное']
phobia = ['Автофобия - боязнь одиночества', 'Акрофобия - страх высоты', 'Антропофобия - страх перед людьми',
          'Антрофобия - боязнь перед растительностью', 'Арахнофобия - боязнь пауков',
          'Ачлуофобия - боязнь темноты', 'Верминофобия - страх перед микробами', 'Земмифобия — боязнь крыс',
          'Гимнофобия — боязнь наготы', 'Гелотофобия — боязнь насмешек', 'Гиппофобия — боязнь лошадей',
          'Некрофобия — боязнь трупов', 'Карциноматофобия — боязнь рака',
          'Клаустрофобия — боязнь замкнутых пространств',
          'Гаптофобия — боязнь прикосновений окружающих людей', 'Апифобия — страх перед пчелами и осами',
          'Аграфобия — боязнь сексуальных домогательств', 'Гематофобия — боязнь вида крови',
          'Паразитофобия — боязнь насекомых', 'Нет фобий', 'Алгофобия — боязнь боли',
          'Гипенгиофобия - стра ответсвенности', 'Айхмофобия — боязнь острых предметов', 'Кинофобия — боязнь собак',
          'Гераскофобия — страх общения с пожилыми людьми', 'Танатофобия — страх умереть', 'Аквафобия — боязнь воды',
          'Клептофобия — боязнь быть ограбленным', 'Эротофобия — боязнь секса', 'Хорофобия — боязнь танцев',
          'Хоплофобия — боязнь оружия', 'Лифтофобия — боязнь лифтов', 'Локайофобия — страх перед родами',
          'Ксенофобия — боязнь незнакомых или иностранцев', 'Гинофобия — боязнь женщин', 'Гамофобия — боязнь брака',
          'Филофобия — боязнь любви', 'Цибофобия - страх еды']
character = ['Никакущий', 'Ловкий', 'Милый', 'Эгоист', 'Авантюрист', 'Смешной', 'Смелый', 'Храбрый', 'Решительный',
             'Креативный', 'Эмоциональный', 'Справедливый', 'Высокомерный', 'Самолюбивый', 'Оптимист', 'Пессимист',
             'Умный', 'Остроумный', 'Альтруист', 'Верный', 'Преданный', 'Искренний', 'Честный', 'Общительный',
             'Трудолюбивый', 'Самостоятельный', 'Изобретательный', 'Находчивый', 'Скромный', 'Щедрый', 'Красивый',
             'Аккуратный', 'Вспыльчивый', 'Настойчивый', 'Упорный', 'Спокойный', 'Тихий', 'Терпеливый', 'Мудрый',
             'Первый в своём роде', 'Вежливый', 'Сильный', 'Практичный', 'Романтичный', 'Ранимый', 'Дружелюбный',
             'Хитрый', 'Толерантный', 'Жестокий', 'Злой', 'Свирепый', 'Ленивый', 'Бескорыстный', 'Тупой', 'Героический',
             'Алчный', 'Похотливый', 'Буйный', 'Конфликтный', 'Нудный', 'Нетерпимость', 'Добрый', 'Лидер', 'Агрессивный',
             'Впечатлительный', 'Лживый']
hobby = ['Гадание', 'Математика', 'Настольные игры', 'Чтение', 'Танцы', 'Пение', 'Плавание', 'Футбол', 'Баскетбол',
         'Воллейбол', 'Дайвинг', 'Исторические реконструкции', 'Эксперт по выживанию', 'Пивоварение', 'Сыроварение',
         'Стрельба из лука', 'Стрельба', 'Нет хобби', 'Хоккей', 'Волонтёр', 'Карточные игры', 'Иностранные языки',
         'Киберспорт', 'Паркур', 'Фитнес', 'Вышивание', 'Шахматы', 'Ботаника', 'Зоология', 'Боевые искусства',
         'Садоводство', 'Блогер', 'Виноделие', 'Кулинария', 'Мыловарение', 'Монтаж видео', 'Скалолазание',
         'Бодибилдинг', 'Создание оружия', 'Рыбалка', 'Прыжки с парашютом', 'Участие в квестах', 'Мастурбация',
         'Дрессировка животных', 'Мастер маникюра', 'Охота', 'Стендап комик', 'Слушает радио', 'Коллекционирование',
         'Собирает пазлы', 'Свечеварение', 'Программирование', 'Робототехника', 'Скульптура и лепка', 'Дизайнер',
         'Массаж', 'Психология', 'Астрология', 'Геймер', 'Дегустатор', 'Путешествия', 'Битбокс', 'Пилотирование дрона',
         'Переводчик', 'Фокусы', 'Физика', 'Химия', 'Инвестирование', 'Хоббихорсинг', 'Квадробинг','Архитектура',
         'Создание видео', 'Просмотр видео с ютуба', 'Хождение в кино']
dop_information = ['Трансгендер', 'Знает теорему Пифагора', 'Убил свою собаку', 'Убил человека',
                   'Знает все стихи Пушкина', 'Ограбил банк', 'Отсидел в тюрьме', 'Всё детство провёл на улице',
                   'Изучал составы различных жидкостей', 'Знает азбуку Морзе', 'Не умеет читать',
                   'Знает, где находится склад с медикаментами', 'Знает серьезных дядек',
                   'Пару раз читал "Метро" Глуховского', 'Умеет манипулировать людьми', 'Участвовал в создании бункера',
                   'Должен был быть казнен', 'Умеет собирать кубик рубика', '2 раза прочитал Войну и Мир',
                   'Должен деньги кладмену', 'Выиграл на "Кто хочет стать миллионером"', 'Знаток на "Что?Где?Когда?"',
                   'Не платит за кредит', 'Научил собаку материться', 'Знает все виды животных', 'Выбрал синию таблетку, а не красную',
                   'Умеет готовить всех жуков', 'Знаком с умпалумпами', 'В детстве смотрел Бригаду', 'Лучший в мире лгун',
                   'Готовит лучший в мире завтрак', 'Лично знает Еву Эльфи', 'Был в отношениях с Иваном Золо',
                   'Рыгает громче всех', 'Пердит громче всех', 'Коллекционирует бабочек', 'Коллекционирует людей',
                   'Сдал ЕГЭ(3 экзамена) на 52 балла', 'Сдал ЕГЭ на 300  баллов', 'Дал взятку президенту',
                   'Во время своего суда крикнул "Судья лох"', 'Познакомился в дайвинчике с учителем русского',
                   'Смотрит тикток 4 часа в день', 'Один раз не ел неделю на спор', 'Знает всех мигрантов на районе',
                   'Посмотрел 2 раза Игру Престолов', 'Знает Тайлера Дёрдена', 'Является чистокровным арийцем',
                   'Вместо письма из Хогвартса получил из военкомата', 'Мама ласково называет "Мой свин"', 'Съел 3 банки мёда',
                   'Подрался с аниматором за место около красотки', 'Подрабатывал строителем', 'Знает как устроен бункер',
                   'Знает все заболевания', 'Был ликвидатором в Чернобыле', 'Умеет вскрывать замки', 'Лично знаком с президентом',
                   'Знаком с Муссолини через 6 рукопажатий', 'Играл за Румынию в Hoi4', 'Умеет варить пиво', 'Умеет варить меф',
                   'Убил человека', 'В брачную ночь играл в доту', 'Был самым умным на курсе', 'Был самым богатым в тюрьме',
                   'Вложил в биткоин все деньги', 'Знает как инвестировать в долгострои', 'Не читал мойдодыра', 'Негр',
                   'Азиат', 'Родом с Украины', 'Снимался в "Слово Пацана"', 'Стрелял в Трампа', 'Саботировал выборы в России',
                   'Убил Кеннеди', 'Участвовал в битве экстрасенсев', 'Победил на Камеди Батл', 'Был президентом школы',
                   'Обменял бывшую на доту 2', 'Проходил курсы психолога', 'Был интерном в больнице', 'Написал учебник по физике',
                   'Ушел со свидания, сказав, что позвонила мама', 'Внешне похож на Путина', 'Был советником Джо Байдена',
                   'Отбил боевой дрон руками', 'В детстве ударился головой о камень', 'Ковыряет в носу', 'Гуманитарий',
                   'Был в психушке до 9 лет', 'Мастер спорта по лепке снеговика', 'Мастер спорта по бегу', 'Имеет золотой значок ГТО',
                   'Имеет бронзовый значок ГТО', 'Знает китайский', 'Умеет понимать собак', 'Курит по 3 сигареты за раз',
                   'Мастер спорта по танцам', 'Тапал хомяка', 'Окончил консерваторию', 'Знает все песни Летова',
                   'Окончил МГУ', 'Окончил НИИХУЯ с золотой медалью', 'Знает морфологический разбор слова', 'Изучал высшую математику',
                   'Изучал квантовую физику', 'Был подмостерье сантехника', 'Ходил в баню со скуфами', 'Скуф', 'Читал "Свиту короля"',
                   'Фанатик коммунизма', 'Фанат нацизма', 'Фанат фашизма', 'Фанат демократии', 'Анархист', 'Либерал',
                   'Умеет резать куриц', 'В детстве жил на ферме', 'Похоронил своего попугая', 'Знает Python', 'Знает C++',
                   'Знает JavaScript', 'Сдал информатику на 100 баллов', 'Был ограблен стаей собак', 'Ухаживал за кактусом',
                   'Читал Майкампф', 'Изучал астрологию', 'Курировал постройку Крымского моста', 'Моджахед', 'Террорист-смертник',
                   'Мусульманин', 'Атеист', 'Виновник катастрофы']
luggage = ['Пистолет', 'Лук для стрельбы', 'Батон белого хлеба', 'Ноутбук', 'Учебник по физике', 'Семена растений',
           'Надувная лодка', 'Ломик и домкрат', 'Весло', 'Костюм хим. защиты', 'Фотоаппарат', 'Костюм клоуна', 'Компас',
           'Бита', 'Дозиметр', 'Таблетки для полного обеззараживания воды', 'Компьютер с rtx4090', 'Топор', 'Мачете',
           'Зажигалка', 'Банка снюса', 'Семена конопли', 'Мешочек кокаина', 'Пустые гильзы', 'Домино', 'Игральные карты',
           'Карты таро', 'Семена картошки', 'Семена лука', 'Семена моркови', 'Семена редьки', 'Детская энциклопедия',
           'Энциклопедия для грибника', 'Пластиковый пакет', 'Скальпель', 'Ножик', 'Калашников', 'Базука', 'Патроны для автомата',
           'Патроны для пистолета', 'Ящик с боеприпасами', 'Бензопила', 'Корм для животных', 'Набор первой помощи',
           'Сотовый телефон', 'Весы', 'Динамометр', 'Коробка алкоголя', '', 'Костюм радиационной защиты',
           'Зонтик', 'Грудной ребёнок', 'Котёнок', 'Собачка', 'Попугай', 'Набор таблеток от ВИЧ', 'Капли для носа',
           'Капли для глаз', 'Маска клоуна', 'Прибор ночного видения', 'Дилдо', 'Комиксы Марвел', 'Комиксы DC', 'Диск с аниме',
           'Книга по выживанию', 'PS4', 'PS5', 'XBOX', 'Ведро молока', 'Бутылка воды', 'Газовая горелка', 'Точило',
           'Пустой шприц', 'Резиновые перчатки', 'Самогонный аппарат', 'Велосипед', 'Самокат', 'Гироскутер', 'Зарядка от ноутбука',
           'Респираторные маски', 'Видеокамера', 'Инфракрасный фонарь', 'Ультрафиолетовая лампа', 'Инфракрасные очки',
           'Двигатель от машины', 'Шпатель', 'Две бутылки пива', 'Кальян', 'Пачка сигарет', 'Сборни песен Круга',
           'Сборник песен Кино', 'Сборник песен Шамана', '1 миллион рублей', '1 миллион долларов', 'Гитара', 'Пианино',
           'Гармонь', 'Скрипка со смычком', 'Маникюрный набор', 'Микроскоп', 'Свисток', 'Роутер Wi-Fi', 'Ящик с инструментами',
           'Пачка карандашей', 'Шампунь', 'Гель для тела', 'Зубные щетки', 'Зубная паста', 'Банка Nutello', 'Ручки',
           '"Коробка жевачек “Love is”', 'Сборник стихов Фета', 'Все томы "Война и мир"', 'Ракетница', 'Отмычки',
           'Контейнер с замороженной спермой', '4 айфон', 'Голубиный помёт', 'Рация', 'Одеяло', 'Карта местности',
           'Дельтаплан', 'Китайский чай', 'Клюквенный компот', 'Чемодан', 'Наушники', 'AirPods2', 'Сабля', 'Песочные часы',
           'Подушка', 'Бутылка кефира', 'Гранатомет', '11 айфон про макс 256Гб', 'Лопата', 'Здоровая почка',
           'Попугай, который знает 2 фразы на выбор', 'Собака, знающая любую команду на выбор', 'Туалетная бумага',
           'Книжка про жизнь с маленьким членом', 'Флешка со всеми сериалами', 'Телевизор', 'Кубик рубика']
card = ['Обмен профессиями справа налево', 'Добавляет одно место в бункер', 'все узнают что бункер находится на необитаемом острове',
        'Защищает любого игрока на один ход', 'Возле бункера находится склад с оружием', 'Возле бункера находится танк',
        'Возле бункера находится самолет', 'Добавляет в бункер пауков', 'Убирает из бункера пауков', 'Добавляет в бункер змей',
        'Убирает из бункера змей', 'Все узнают пол любого игрока на выбор', 'Добавляет место в Бункер', 'Убирает место из Бункера',
        'Все узнают, что около бункера есть уцелевший магазин', 'Все узнают, что бункер находится в Зоне 51', 'Бункер находится в Метро',
        'Возле вас находится бункер со всеми актрисами браззерс', 'Любой игрок на выбор раскрывает свое хобби',
        'Любой игрок на выбор раскрывает свою фобию', 'Любой игрок на выбор раскрывает свой багаж', 'Любой игрок на выбор раскрывает свой возраст',
        'Позволяет вылечить от любого недуга любого игрока кроме вас', 'Возле вас находится бункер с агрессивно настроенными выжившими']

# endregion

# region Все данные про бункер
bunker = []
disaster = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
bunker_location = ['Большой город', 'Небольшой город', 'Средний город', 'Мегаполис', 'Лес', 'Равнина', 'Горы',
                   'На берегу реки', 'На берегу моря', 'Около озера', 'В пещере', 'В водопаде', 'В джунглях']
bunker_size = ['Маленький', 'Небольшой', 'Размером с футбольное поле', 'Большой', 'Гигантский']
bunker_time = ['6 месяцев', '1 год', '2 года', '3 года', '5 лет', '7 лет', '10 лет', '15 лет', '20 лет', '25 лет',
               '30 лет', '40 лет', '50 лет', '60 лет', '70 лет', '80 лет', '90 лет', '100 лет', '150 лет']
bunker_min_time = ['1 месяц', '2 месяца', '3 месяца', '6 месяцев', '1 год', '2 года','3 года', '4 года', '5 лет']
bunker_destruction = ['Сломан туалет', 'Тараканы съели всю еду', 'Часто пропадает свет', 'Поврежден генератор',
                      'Повреждена вентиляция', 'Не герметичен', 'Есть тайный ход для разбойников',
                      'Часто нападают рейдеры', 'Слишком холодно', 'Слишком жарко', 'Сломана входная дверь',
                      'Мало кислорода', 'Мало света', 'Очень душно', 'Слишком холодно']
who_in_bunker = ['Змеи', 'Тараканы', 'Жуки', 'Пауки', 'Черви', 'Летучие мыши', 'Муравьи', 'Волк', 'Пчелиные ульи']
rooms = ['Библиотека', 'Тренажерный зал', 'Компьютерная комната', 'Кухня', 'Душевая', 'Столовая', 'Раздевалка', 'Серверная',
         'Кабинет', 'Кинотеатр', 'Оперный зал', 'Баскетбольная площадка', 'Теннисный корт', 'Морозильная', 'Теплица',
         'Генераторная', 'Комната переработки кислорода', 'Комната переработки воды', 'Кладовка', 'Склад с оружием',
         'Мастерская', 'Химическая лаборатория']
inventory_bunker = ['туалетная бумага', 'вантуз', 'коробок спичек', 'книги "сделай сам из дерева и металла"',
                    'набор варки пива', 'книги по ремонту электроники', 'кулинарная книга', 'аптечки в размере 10 шт',
                    'книги по медицине и психологии', 'интернет+ноутбук', 'аквариум', 'холодильник', 'пылесос',
                    'книги по выживанию', 'книги "Всё о воде и ледниках"', 'семена растений', 'книги по ремонту бункера',
                    'учебные пособия для изучения иностранных языков', 'патроны для пистолета', 'огнетушитель', 'зимние куртки']
# endregion

def generator_persa(my_gender, prof, heal, body, phob, charac, hobbi, dop_infa, lugg, cart):
    global age
    # region Генерация возраста
    age_str = choice(copy(age))
    if age_str == 'Молодой':
        age_int = randint(14, 34)
    elif age_str == 'Взрослый':
        age_int = randint(35, 59)
    else:
        age_int = randint(60, 85)
    # endregion
    # region Генерация стажа
    if age_str == 'Молодой':
        prof_time = choice(['меньше месяца', '3-6 месяцев', '6 месяцев - 1 год', 'больше года', '1-2 года'])
    else:
        prof_time = choice(['меньше месяца', '3-6 месяцев', '6 месяцев - 1 год', 'больше года', '1-2 года', 'более 2 '
                                                                                                            'лет',
                            'более 5 лет', '10 лет', '12 лет', '15 лет', '20 лет', 'более 20 лет', 'всю жизнь'])
    # endregion
    # region Генерация "Здоров или болен"
    if randint(1, 10) < 8:
        heal = 'Идеально здоров'
    # endregion
    # region Генерация оплодотворения
    if age_int > 60 and my_gender == 'Мужчина':
        reproduct = 'Бесплоден'
    elif age_int > 50 and my_gender == 'Женщина':
        reproduct = 'Бесплодна'
    elif my_gender == 'Мужчина':
        reproduct = choice(['Чайлдфри', 'Плодовит', 'Плодовит', 'Бык-осеменитель'])  # два раза для большей
        # вероятности
    else:
        reproduct = choice(['Чайлдфри', 'Плодовита', 'Плодовита'])
    # endregion
    height = randint(150, 210)
    return [my_gender, age_int, reproduct, prof, prof_time, heal, body, height, phob, charac, hobbi, dop_infa, lugg,
            cart]


def generator_bunkera(disaster, b_location, b_size, b_destr, who_in, rooms1, rooms2, invent1, invent2):
    if randint(1,3) == 1:
        who_in = 'Никого нет'
    if randint(1, 3) == 1:
        b_destr = 'Нет проблем'
    if disaster == 1:
        disaster = 'Вулканы производящие чрезвычайно мощные и объёмные извержения, подобные извержения приводят к тому' \
                 ' что ландшафт и климат нашей планеты коренным образом изменяются, после выхода из бункера глобальная засуха.'
        destr = randint(70, 100)
        last_people_procent = randint(1, 15)
        bun_time = choice(['5 лет', '7 лет', '10 лет', '15 лет', '20 лет', '25 лет',
               '30 лет', '40 лет'])
        bun_min_time = choice(['2 месяца', '3 месяца', '6 месяцев'])
    elif disaster == 2:
        disaster = 'Через 50 лет вся жизнь людей не обходится без роботов, которые полностью являются разумными,' \
                   ' роботы захватили мир и правят им, здания состоят полностью из техники.'
        destr = randint(20, 50)
        last_people_procent = randint(20, 60)
        bun_time = choice(['7 лет', '10 лет', '15 лет', '20 лет'])
        bun_min_time = choice(['3 года', '4 года', '5 лет'])
    elif disaster == 3:
        disaster = 'Смертельный вирус созданный как биологическое оружие выйдет из под контроля и спровоцирует' \
                   ' глобальную эпидемию, но после выхода из бункера выявлена мутация практически всех видов животных, растений и людей'
        destr = randint(10,50)
        last_people_procent = randint(2, 10)
        bun_time = choice(['2 года', '3 года', '5 лет', '7 лет'])
        bun_min_time = choice(['2 месяца', '3 месяца', '6 месяцев'])
    elif disaster == 4:
        disaster = 'Начнётся ядерная война, радиоактивная пыль окутает всю планету закрыв солнечный свет и на земле' \
                   ' наступит долгая ядерная зима, после выхода из бункера, сложности с почвой, водой, необходима дополнительная химическая обработка'
        destr = randint(75, 95)
        last_people_procent = randint(1, 10)
        bun_time = choice(['1 год', '2 года', '3 года', '5 лет', '7 лет', '10 лет', '15 лет', '20 лет'])
        bun_min_time = choice(['1 месяц', '2 месяца', '3 месяца', '6 месяцев'])
    elif disaster == 5:
        disaster = 'Из-за глобального потепления растают все полярные и континентальные льды, процент суши составляет 15%,' \
                   ' вода поглотит всё вокруг, после выхода из бункера произошло нарушение климата тропики теперь повсюду,' \
                   ' необходимо приспособиться к новым видам, к новым видам растений и крупным насекомым. Оставшиеся люди живут в бункерах.'
        destr = randint(80, 100)
        last_people_procent = randint(1, 7)
        bun_time = choice(['3 года', '5 лет', '7 лет', '10 лет', '15 лет', '20 лет'])
        bun_min_time = choice(['1 год', '2 года','3 года'])
    elif disaster == 6:
        disaster = 'Появляется новое вирусное заболевание, которое является очень разным и смертельным, все здания,' \
                   ' почва, растения и животные почти в порядке, но почти все население Земли умерло от нового вируса.'
        destr = randint(10, 20)
        last_people_procent = randint(1, 5)
        bun_time = choice(['3 года', '5 лет', '7 лет', '10 лет'])
        bun_min_time = choice(['2 месяца', '3 месяца', '6 месяцев'])
    elif disaster == 7:
        disaster = 'Прогрессирующие во времени и пространстве распространения инфекционного заболевания среди людей' \
                   ' способно стать источником чрезвычайной ситуации, люди теперь зомби, после выхода из бункера малая' \
                   ' часть зомби бродит по земле которая неизбежно погибнет'
        destr = randint(10, 20)
        last_people_procent = randint(1, 20)
        bun_time = choice(['6 месяцев', '1 год', '2 года'])
        bun_min_time = choice(['2 месяца', '3 месяца'])
    elif disaster == 8:
        disaster = 'Крушение самолёта на подозрительном острове, из выживших только мы. Мы нашли бункер, в который' \
                   ' должны попасть, чтобы пережить агрессию жителей острова. После выхода из бункера у нас есть выбор: ' \
                   'остаться на острове, разобравшись с его жителями, или искать путь домой'
        destr = randint(0, 5)
        last_people_procent = randint(1, 10)
        bun_time = choice(['2 недели', '3 недели', '1 месяц'])
        bun_min_time = choice(['1 неделя'])
    elif disaster == 9:
        disaster ='Случилась экологическая катастрофа, многие виды жизни были утрачены (как и растений, так и животных)' \
                  ' из-за отравления токсинами и пластика, здания остались целым.'
        destr = randint(0, 5)
        last_people_procent = randint(10, 30)
        bun_time = choice(['3 месяца', '6 месяцев', '1 год', '2 года','3 года'])
        bun_min_time = choice(['1 месяц', '2 месяца', '3 месяца'])
    elif disaster == 10:
        disaster = 'Популяция Земли становится все меньше и меньше из-за бесплодия и чайлдфри. Предполагается, что если' \
                   ' все таки и продолжится, то люди вымрут через 10 лет'
        destr = randint(0, 5)
        last_people_procent = randint(1, 5)
        bun_time = choice(['7 лет', '10 лет', '15 лет', '20 лет'])
        bun_min_time = choice(['4 года', '5 лет'])
    elif disaster == 11:
        disaster = 'Искусственный интеллект ChatGOIDA, для управления системами обороны, вышел из строя и' \
                   ' посчитал человечество большой угрозой. Это привело к тому, что искусственный интеллект переступил' \
                   ' принцип "не убивать человека" и взял под контроль над управлением военными роботами, которые' \
                   ' начали истреблять человечество. Суперкомпьютер захватил власть над планетой, выжившим людям' \
                   ' пришлось прятаться в старых бункерах'
        destr = randint(20, 40)
        last_people_procent = randint(5, 15)
        bun_time = choice(['6 месяцев', '1 год', '2 года'])
        bun_min_time = choice(['1 месяц', '2 месяца', '3 месяца'])
    elif disaster == 12:
        disaster = 'Проект «Стрела». Военные, работавшие над проектом, нечаянно открыли вход в иное измерение.' \
                   ' Густой, неестественный белый туман медленно начал заполонять огромные участки поверхности.' \
                   ' Видимость практически нулевая. По миру стали бродить неведомые чудовища, которые могут уничтожить все человечество.'
        destr = randint(80, 100)
        last_people_procent = randint(10, 20)
        bun_time = choice(['6 месяцев', '1 год', '2 года'])
        bun_min_time = choice(['1 месяц', '2 месяца', '3 месяца'])
    elif disaster == 13:
        disaster = 'Все началось с ученого, искавшего средство от рака для своего отца. Он испытал его на обезьяне и не заметил никаких последствий,' \
                   ' но обезьяна эволюционировала и стала мыслить как человек. Она устроила побег из лаборатории и сплотила вокруг себя своих собратьев' \
                   ' чтобы устроить революцию. Сейчас на Земле идет глобальная война между людьми и обезьянами.'
        destr = randint(20, 60)
        last_people_procent = randint(10, 20)
        bun_time = choice(['6 месяцев', '1 год'])
        bun_min_time = choice(['1 месяц', '2 месяца', '3 месяца'])
    elif disaster == 14:
        disaster = 'Инопланетная раса поймала наш Вояджер и нашла на нем оставленную пластинку от нас с нашими характеристиками' \
                   ' и координатами Земли. Понаблюдав за нами, что они поняли, что людям не место в этом мире и начали высаживаться' \
                   ' на нашу планету. Оружие военных бессильно, пришельцы истребили большую часть населения. Но один из нас заметил, ' \
                   'что пришельцы не могут пережить наши микроорганизмы и потихоньку умирают от них.'
        destr = randint(40, 100)
        last_people_procent = randint(10, 20)
        bun_time = choice(['6 месяцев', '1 год', '2 года', '3 года'])
        bun_min_time = choice(['1 месяц', '2 месяца', '3 месяца'])
    elif disaster == 15:
        disaster = 'Глобальное похолодание привело к смерти почти всего насления Земли. Земля покрыта огромным слоем' \
                   ' льда в несколько метром, живтоных и растений почти не осталось.'
        destr = randint(80, 100)
        last_people_procent = randint(3, 11)
        bun_time = choice(['2 года', '3 года', '5 лет', '7 лет'])
        bun_min_time = choice(['6 месяцев', '1 год', '2 года'])
    elif disaster == 16:
        disaster = 'Второе пришествие: люди смогли найти дату второго пришествия, но каково было их удивление, когда ' \
                   'они увидели, что вместо Иисуса к ним поднялся дьявол. Люди были наказаны за их грехи.' \
                   ' Теперь на Земле настоящий ад. Выжившие люди укрылись в бункерах.'
        destr = randint(90, 100)
        last_people_procent = randint(1, 5)
        bun_time = choice(['2 года', '3 года', '5 лет', '7 лет'])
        bun_min_time = choice(['6 месяцев', '1 год', '2 года'])
    elif disaster == 17:
        disaster = 'Глобальная вспышка на Солнце привела к уничтожению всех элеткрических приборов. Без ютуба и тиктока люди' \
                   ' начали сходить с ума и переубивали друг друга. Лишь жители России и других санкционных стран смогли выжить.'
        destr = randint(50, 70)
        last_people_procent = randint(5, 15)
        bun_time = choice(['1 год','2 года', '3 года', '5 лет'])
        bun_min_time = choice(['3 месяца', '6 месяцев', '1 год', '2 года'])
    elif disaster == 18:
        disaster = 'В результате химической войны большая часть всех растений и животных вымерла. Люди мутировали и превратились ' \
                   'в ужасные существа. Оставшиеся укрылись в бункерах, теперь им придется возвращать все на свои места.'
        destr = randint(30, 50)
        last_people_procent = randint(5, 15)
        bun_time = choice(['1 год','2 года', '3 года', '5 лет'])
        bun_min_time = choice(['3 месяца', '6 месяцев', '1 год', '2 года'])
    elif disaster == 19:
        disaster = 'В мире завирусилась странное видео. На нём какая-то девочка вылезает из колодца, а затем тебе звонит ' \
                   'телефон, и тебе говорят, что ты умрешь через 7 дней. За неделю видео посмотрело больше 7 миллиардов человек.' \
                   ' Итог закономерен. Люди укрылись в бункерах с едой, чтобы придумать, как вернуть все назад.'
        destr = randint(10, 20)
        last_people_procent = randint(5, 10)
        bun_time = choice(['1 год','2 года', '3 года', '5 лет'])
        bun_min_time = choice(['3 месяца', '6 месяцев', '1 год', '2 года'])
    elif disaster == 20:
        disaster = 'В мире все таки победил терроризм. Мир погрузился в анархию, стран больше нет, большая часть населения ' \
                   'погибла в результате терактов. Выжившие укрылись в бункерах.'
        destr = randint(80, 100)
        last_people_procent = randint(10, 15)
        bun_time = choice(['1 год','2 года', '3 года'])
        bun_min_time = choice(['3 месяца', '6 месяцев'])
    return [disaster,destr, last_people_procent, bun_time, bun_min_time, b_location, b_size,  b_destr, who_in, rooms1, rooms2, invent1, invent2]


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn_gen_persa = types.InlineKeyboardButton('Создать комнату', callback_data='make_room')
    btn_gen_bunkera = types.InlineKeyboardButton('Подключиться к комнате', callback_data='connect_room')
    markup.add(btn_gen_persa)
    markup.add(btn_gen_bunkera)
    bot.send_message(message.chat.id, 'Что будем делать?', reply_markup=markup)


@bot.message_handler(commands=['help'])
def helpa(message):
    bot.reply_to(message,
                 f'Привет, я генератор для игры Бункер.\n Чтобы узнать правила игры, напиши /rules.\n Чтобы начать '
                 f'игру напиши /start.\n Один человек должен начать игру, нажав на кнопку "Создать комнату". '
                 f'После этого будет создана игра, дальше все остальные игроки должны нажать на кнопку'
                 f' "Подключиться к комнате" и написать код от комнаты. И я пришлю вам вашего персонажа!'
                 f' Для перегенерации достаточно создать новую комнату')


@bot.message_handler(commands=['rules'])
def rules(message):
    bot.send_message(message.chat.id, 'Спрашивай у хоста, он шарит в этом')


@bot.callback_query_handler(func=lambda callback: True)
def callback_messages(callback):
    if callback.data == 'make_room':
        global id_room
        id_room = randint(100, 1000)
        bot.send_message(callback.message.chat.id, f'ID комнаты {id_room}')
        snt = bot.send_message(callback.message.chat.id, 'Сколько человек будет в игре?')
        bot.register_next_step_handler(snt, gen_pers)
    if callback.data == 'connect_room':
        stn = bot.send_message(callback.message.chat.id, 'Напиши код от комнаты: ')
        bot.register_next_step_handler(stn, send_pers)


def gen_pers(message):
    global people_count_in_game, count_males, count_females, males_and_females
    global disaster, bunker_location, bunker_size
    global bunker_destruction, who_in_bunker, inventory_bunker, rooms, bunker
    global pers1, pers2, pers3, pers4, pers5, pers6, pers7, pers8, pers9, pers10, pers11, pers12, pers13, pers14, pers15, pers16
    global profession, health, body_type, phobia, character, hobby, dop_information, luggage, card
    # region safe_data
    safe_prof = copy(profession)
    safe_health = copy(health)
    safe_body_type = copy(body_type)
    safe_phobia = copy(phobia)
    safe_character = copy(character)
    safe_hobby = copy(hobby)
    safe_dop_information = copy(dop_information)
    safe_luggage = copy(luggage)
    safe_card = copy(card)

    safe_b_rooms = copy(rooms)
    safe_b_invent = copy(inventory_bunker)
    safe_b_room1 = choice(safe_b_rooms)
    safe_b_rooms.remove(safe_b_room1)
    safe_b_room2 = choice(safe_b_rooms)
    safe_b_invent1 = choice(safe_b_invent)
    safe_b_invent.remove(safe_b_invent1)
    safe_b_invent2 = choice(safe_b_invent)
    safe_disaster = choice(disaster)
    safe_bunker = choice(bunker_location)
    safe_b_size = choice(bunker_size)
    safe_b_destr = choice(bunker_destruction)
    safe_who_in = choice(who_in_bunker)
    # endregion
    males_and_females = []
    try:
        people_count_in_game = int(message.text)
    except ValueError:
        bot.reply_to(message, 'Некорректное сообщение')
    if people_count_in_game not in [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]:
        bot.send_message(message.chat.id, 'Игроков может быть от 5 до 16, укажите корректное число')
    else:

        count_males = randint(3, people_count_in_game - 3)
        for i in range(count_males):
            males_and_females.append('Мужчина')
        count_females = 16 - count_males
        for i in range(count_females):
            males_and_females.append('Женщина')
        # region Выбор рандомных данных для человека
        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers1 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers2 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers3 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers4 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers5 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers6 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers7 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers8 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers9 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers10 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                 safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers11 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                 safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers12 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                 safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers13 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                 safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers14 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                 safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers15 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                 safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)

        pol = choice(males_and_females)
        safe_my_prof = choice(safe_prof)
        safe_my_health = choice(safe_health)
        safe_my_body = choice(safe_body_type)
        safe_my_phobia = choice(safe_phobia)
        safe_my_character = choice(safe_character)
        safe_my_hobby = choice(safe_hobby)
        safe_my_dop = choice(safe_dop_information)
        safe_my_luggage = choice(safe_luggage)
        safe_my_card = choice(safe_card)
        pers16 = generator_persa(pol, safe_my_prof, safe_my_health, safe_my_body, safe_my_phobia, safe_my_character,
                                 safe_my_hobby, safe_my_dop, safe_my_luggage, safe_my_card)
        males_and_females.remove(pol)
        safe_prof.remove(safe_my_prof)
        safe_health.remove(safe_my_health)
        safe_phobia.remove(safe_my_phobia)
        safe_character.remove(safe_my_character)
        safe_hobby.remove(safe_my_hobby)
        safe_dop_information.remove(safe_my_dop)
        safe_luggage.remove(safe_my_luggage)
        safe_card.remove(safe_my_card)
        # endregion
        #region принтим персов в консоль
        """
        print(pers1)
        print(pers2)
        print(pers3)
        print(pers4)
        print(pers5)
        print(pers6)
        print(pers7)
        print(pers8)
        print(pers9)
        print(pers10)
        print(pers11)
        print(pers12)
        print(pers13)
        print(pers14)
        print(pers15)
        print(pers16)"""
        # endregion
        bunker = generator_bunkera(safe_disaster, safe_bunker, safe_b_size, safe_b_destr, safe_who_in, safe_b_room1, safe_b_room2, safe_b_invent1, safe_b_invent2)

def send_pers(message):
    global pers1, pers2, pers3, pers4, pers5, pers6, pers7, pers8, pers9, pers10, pers11, pers12, pers13, pers14, pers15, pers16, bunker
    if message.text == str(id_room):
        bot.reply_to(message, 'Успешное присоединение!')
        #[disaster,destr, last_people_procent, bun_time, bun_min_time, b_location, b_size,  b_destr, who_in, rooms1, rooms2, invent1, invent2]
        bot.send_message(message.chat.id, f'{emoji.emojize(":newspaper:")}Ваша катастрофа и бункер:\n\n'
                                          f'{emoji.emojize(":zombie:")}Катастрофа: {bunker[0]}\n\n'
                                          f'{emoji.emojize(":radioactive:")}Разрушения на поверхности: {bunker[1]}%\n\n'
                                          f'{emoji.emojize(":woman_and_man_holding_hands:")}Остаток выжившего населения: {bunker[2]}%\n\n'
                                          f'{emoji.emojize(":motorway:")}Местонахождение бункера: {bunker[5]}\n\n'
                                          f'{emoji.emojize(":restroom:")}Размер бункера: {bunker[6]}\n\n'
                                          f'{emoji.emojize(":mantelpiece_clock:")}Бункер рассчитан на: {bunker[3]}\n\n'
                                          f'{emoji.emojize(":mantelpiece_clock:")}Минимальное время выхода: {bunker[4]}\n\n'
                                          f'{emoji.emojize(":mouse:")}В бункере находятся: {bunker[8]}\n\n'
                                          f'{emoji.emojize(":door:")}Комнаты: {bunker[9]}, {bunker[10]}\n\n'
                                          f'{emoji.emojize(":baggage_claim:")}В бункере есть: {bunker[11]} и {bunker[12]}\n\n'
                                          f'{emoji.emojize(":cross_mark:")}Проблемы в бункере: {bunker[7]}')
        if len(pers1) != 0:
            # [my_gender, age_int, reproduct, prof, prof_time, heal, body, height, phob, charac, hobbi, dop_infa,
            # lugg, cart]
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")} Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers1[0]}, возраст {pers1[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")} Способность к оплодотворению: {pers1[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers1[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers1[7]} | Телосложение: {pers1[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers1[3]}, стаж - {pers1[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers1[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers1[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers1[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers1[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")} Инвентарь: {pers1[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers1[13]}')
            pers1 = []
        elif len(pers2) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers2[0]}, возраст {pers2[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers2[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers2[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers2[7]} | Телосложение: {pers2[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers2[3]}, стаж {pers2[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers2[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers2[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers2[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers2[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers2[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers2[13]}')
            pers2 = []
        elif len(pers3) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers3[0]}, возраст {pers3[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers3[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers3[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers3[7]} | Телосложение: {pers3[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers3[3]}, стаж {pers3[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers3[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers3[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers3[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers3[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers3[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers3[13]}')
            pers3 = []
        elif len(pers4) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers4[0]}, возраст {pers4[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers4[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers4[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers4[7]} | Телосложение: {pers4[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers4[3]}, стаж {pers4[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers4[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers4[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers4[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers4[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers4[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers4[13]}')
            pers4 = []
        elif len(pers5) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers5[0]}, возраст {pers5[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers5[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers5[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers5[7]} | Телосложение: {pers5[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers5[3]}, стаж {pers5[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers5[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers5[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers5[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers5[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers5[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers5[13]}')
            pers5 = []
        elif len(pers6) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers6[0]}, возраст {pers6[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers6[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers6[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers6[7]} | Телосложение: {pers6[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers6[3]}, стаж {pers6[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers6[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers6[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers6[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers6[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers6[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers6[13]}')
            pers6 = []
        elif len(pers7) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers7[0]}, возраст {pers7[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers7[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers7[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers7[7]} | Телосложение: {pers7[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers7[3]}, стаж {pers7[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers7[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers7[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers7[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers7[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers7[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers7[13]}')
            pers7 = []
        elif len(pers8) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers8[0]}, возраст {pers8[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers8[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers8[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers8[7]} | Телосложение: {pers8[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers8[3]}, стаж {pers8[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers8[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers8[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers8[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers8[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers8[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers8[13]}')
            pers8 = []
        elif len(pers9) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers9[0]}, возраст {pers9[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers9[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers9[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers9[7]} | Телосложение: {pers9[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers9[3]}, стаж {pers9[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers9[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers9[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers9[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers9[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers9[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers9[13]}')
            pers9 = []
        elif len(pers10) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers10[0]}, возраст {pers10[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers10[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers10[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers10[7]} | Телосложение: {pers10[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers10[3]}, стаж {pers10[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers10[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers10[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers10[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers10[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers10[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers10[13]}')
            pers10 = []
        elif len(pers11) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers11[0]}, возраст {pers11[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers11[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers11[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers11[7]} | Телосложение: {pers11[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers11[3]}, стаж {pers11[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers11[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers11[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers11[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers11[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers11[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers11[13]}')
            pers11 = []
        elif len(pers12) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers12[0]}, возраст {pers12[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers12[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers12[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers12[7]} | Телосложение: {pers12[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers12[3]}, стаж {pers12[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers12[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers12[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers12[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers12[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers12[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers12[13]}')
            pers12 = []
        elif len(pers13) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers13[0]}, возраст {pers13[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers13[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers13[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers13[7]} | Телосложение: {pers13[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers13[3]}, стаж {pers13[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers13[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers13[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers13[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers13[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers13[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers13[13]}')
            pers13 = []
        elif len(pers14) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers14[0]}, возраст {pers14[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers14[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers14[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers14[7]} | Телосложение: {pers14[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers14[3]}, стаж {pers14[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers14[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers14[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers14[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers14[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers14[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers14[13]}')
            pers14 = []
        elif len(pers15) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers15[0]}, возраст {pers15[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers15[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers15[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers15[7]} | Телосложение: {pers15[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers15[3]}, стаж {pers15[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers15[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers15[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers15[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers15[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers15[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers15[13]}')
            pers15 = []
        elif len(pers16) != 0:
            bot.send_message(message.chat.id, f'{emoji.emojize(":boy:")}Твой персонаж:\n\n'
                                              f'{emoji.emojize(":old_man_light_skin_tone:")} {pers16[0]}, возраст {pers16[1]}\n\n'
                                              f'{emoji.emojize(":couple_with_heart_woman_man:")}Способность к оплодотворению: {pers16[2]}\n\n'
                                              f'{emoji.emojize(":dna:")} Здоровье: {pers16[5]}\n\n'
                                              f'{emoji.emojize(":man_walking:")} Рост: {pers16[7]} | Телосложение: {pers16[6]}\n\n'
                                              f'{emoji.emojize(":detective:")} Профессия: {pers16[3]}, стаж {pers16[4]}\n\n'
                                              f'{emoji.emojize(":spiral_notepad:")} Черта характера: {pers16[9]}\n\n'
                                              f'{emoji.emojize(":man_climbing_medium_skin_tone:")} Хобби: {pers16[10]}\n\n'
                                              f'{emoji.emojize(":skull:")} Фобия: {pers16[8]}\n\n'
                                              f'{emoji.emojize(":information:")} Доп.информация: {pers16[11]}\n\n'
                                              f'{emoji.emojize(":baggage_claim:")}Инвентарь: {pers16[12]}\n\n'
                                              f'{emoji.emojize(":scroll:")} Особая карта: {pers16[13]}')
            pers16 = []
        else:
            bot.reply_to(message, 'Свободных персонажей больше нет. Ждите новою игру')
    else:
        bot.reply_to(message, 'Указан неправильный код! Переподключитесь ещё раз.')


@bot.message_handler(content_types=['text'])
def texting(message):
    bot.reply_to(message, 'Не понимаю тебя, чтобы начать напиши /start')


bot.polling(none_stop=True)
